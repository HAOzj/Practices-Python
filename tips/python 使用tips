pip相关:
  pip install 'tensorflow==1.3' --force-reinstall  # pip更新module到specific版本
  pip install module --upgrade # 更新到最新版本

函数相关:
  def(positional arguments, named arguments, default arguments) # 变量顺序
  def(*args, **kwargs) # *args为不确定长度的参数,是列表; **kwargs为named arguments

类相关 :
  class的 __repr__(self) # 给开发者显示内容, 参看 https://stackoverflow.com/questions/1984162/purpose-of-pythons-repr
  class的 __dict__(self) # instance的内部变量名字的字典,参看 https://stackoverflow.com/questions/4877290/what-is-the-dict-dict-attribute-of-a-python-class
  super() # 父类
  class(Baseclass) # __init__时最好也初始化Baseclass

数据类型相关:
  dict.get(key) # if key in dict.keys(): return dict[key] else: None
  generator # 生成器,用来节省内存,也是一种iterable.
            # 不过 1)you can only iterate it over once; 2) (elements) rather than [elements]; 3)用yield rather than return, the function will return a generator
            # refer to https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do
  传入引用     # python中函数传入引用(c中的传指针),只对 可改变类型有用
              # 可改变类型  : list, dict ; 不可改变类型: int, float, string, tuple
  dict(zip(x,y))  # map two lists into a dict 
                  # refer to https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python

json相关:
  with open(file,'w') as fp : \  fp.write(json.dumps(data))
  with open(file) as fp: \  data= json.load(fp)
  json.dumps(data, default=str)  # overcome “datetime.datetime not JSON serializable”

pickle相关:
  with open(file, "wb") as fp:\  pickle.dump(data, fp)      # dump将数据存入文件,dumps存入字符串  
  with open(file, "rb") as fp:\  data = pickle.load(fp, encoding = "bytes") # loads操作对象也是字符串   

date相关:
  from dateutil.relativedelta import relativedelta \date + relativedelta( months= 1)  # 给定日期 前/后 几个月 的日期
  date +/- datetime.timedelta(days/hours/senconds = int) #  前/后 几 天/小时/分/秒 given a datetime
  datetime.datetime.today().weekday()  # 判断 the day of week given a date  
  workalendar # 提供G20国家节日的module

检测相关:
  sys.exit(<message>) # 退出程序并输出message  
  if '<name>' in vars() # 判断变量是否存在  
  raise <error>(<message>) # 触发error并输出message
